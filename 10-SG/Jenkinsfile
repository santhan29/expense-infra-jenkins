pipeline {
    agent {
        label 'AGENT-1' 
    }
    options{
        timeout(time: 30, unit: 'MINUTES') 
        disableConcurrentBuilds() 
    }
    parameters{
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select action')
    }
    stages {
        stage('Init and Plan') { 
            steps { 
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 10-SG
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                  
                    """
                } 
            }
        }
        stage('Apply or Destroy') { 
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-credentials') {
                    sh """
                        cd 10-SG
                        if [ ${params.ACTION} == 'apply' ]
                        then 
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then 
                            terraform destroy -auto-approve 
                        fi 
                    """
                }
            }
        }
        stage('Destroy VPC') {
            when {
                expression { params.ACTION == 'destroy'} 
            }
            steps{
                build job: '00-VPC', parameters: [string(name: 'ACTION', value: "destroy")], wait: false
            } 
        }
        stage('Parallel in sequence') { 
            when {
                expression { params.ACTION == 'apply'}  
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-BASTION', parameters: [string(name: 'ACTION', value: "apply")], wait: false 
                    } 
                }
                stage('RDS') {
                    steps {
                        build job: '30-RDS', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('Eks') {
                    steps {
                        build job: '40-EKS', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '70-ECR', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        } 
        stage('Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('ACM') {
                    steps {
                        build job: '50-ACM', parameters: [string(name: 'ACTION', value: "apply")]
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-ALB', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '80-CDN', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
                
        }
    }
    post{
        always{
            echo "this section runs always" 
            deleteDir() 
        }
        success{
            echo "this section runs when pipeline is success"
        }
        failure{
            echo "this section runs when pipeline is failure" 
        }
    }
} 